// C++ code

const uint8_t LED_PIN = 7;
const uint8_t LED_PIN2 = 5;
const uint8_t LED_PIN3 = 6;
const uint8_t BUT_PIN = 2;

const int led_pin4 = PB5;
const uint16_t t1_load = 0;
//we set this to 46875 because we want the LED to blink every 3
//seconds. (3 x 16hz) / 1024 is 0.046875. We divide by 1024
//because that is what we will set the prescaler too since using
// a lower prescaler would require a higher t1_comp (OCIE1A)
// than timer1 could count.
const uint16_t t1_comp = 46875;

void setup()
{
  //since it is an input we set to 1 to enable pullup resistor
  PORTD |= (1 << BUT_PIN);
  
	
  //Set LED pins to be output
  DDRD |= 0b11100000;
  
  //We set the 0th register to 1 so that interrupts are generated
  //by any change in INT0
  //We set the 2nd register to 1 for the same reason except this
  //effects INT1
  EICRA |= 0b00000101;
  
  //Enables interrupts for INT0(D2 - button) and INT1(D3 - PIR)
  EIMSK |= 0b00000011;
  
  //sets bit 7 in the SREG register to enable interrupts
  sei();
  
  //enable interrupts for port D
  PCICR |= 0b00000100;
  
  //Enabling pin 4 for interrupts PCINT20 = pin 4
  //soil sensor is linked to pin 4
  PCMSK2 |= (1 << PCINT20);
  
  Serial.begin(9600);
  
  //set builtin LED to be output
  DDRB |= (1 << led_pin4);
  
  //clear timer1
  TCCR1A = 0;
  
  //make sure 4th register is cleared and set 3rd register to 1 
  //to enable CTC mode
  TCCR1B &= ~(1 << WGM13);
  TCCR1B |= (1 << WGM12);
  
  //set prescaler to 1024
  TCCR1B |= (1<< CS12);
  TCCR1B &= ~(1<< CS11);
  TCCR1B |= (1<< CS10);
  
  //reset timer and set compare value
  TCNT1 = t1_load;
  OCR1A = t1_comp;
  
  //enable timer1 compare interrupt
  TIMSK1 = (1 << OCIE1A);
  
}

void loop()
{
}
  
ISR(INT0_vect)
{
  //XOR so that it only turns on while button is held
  PORTD ^= (1 << LED_PIN2);
}

ISR(INT1_vect)
{
  //XOR so that when motion sensor pin goes back from high to low it turns off LED
  PORTD ^= (1 << LED_PIN);
}

//PCINT2 = pins D0 - D7
ISR(PCINT2_vect)
{
  PORTD ^= (1 << LED_PIN3);
}

//blink built in LED based on timer compare interrupt
ISR(TIMER1_COMPA_vect)
{
  PORTB ^= (1 << led_pin4);
}
